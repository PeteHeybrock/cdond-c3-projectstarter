version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      ID:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo ${ID}
            aws cloudformation delete-stack --stack-name "udapeople-backend-${ID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${ID}"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build Backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force

  # get-last-infrastructure-id:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - run: |
  #         aws cloudformation \
  #         list-exports --query "Exports[?Name==\`ID\`].Value" \
  #         --no-paginate --output text

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: yum install -y tar gzip
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Store Backend IP
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text > ~/backendIP.txt
      - persist_to_workspace:
          root: ~/
          paths: [backendIP.txt]
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            exit 1
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add backend IP to ansible inventory
          command: |
            cat ~/backendIP.txt >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths: 
            - inventory.txt
      # to retrieve, use the following
#      - attach_workspace:
#          at: .circleci/ansible/
      # Rollback on failure
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}"   

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     checkout
  #     - add_ssh_keys:
  #         fingerprints: ["09:5b:41:c5:9c:e5:2d:67:8a:18:31:14:e8:c5:f6:d6"]
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Configure server
  #         command: |
  #           # Your code here
  #           exit 1
  #     # Here's where you will add some code to rollback on failure      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]

